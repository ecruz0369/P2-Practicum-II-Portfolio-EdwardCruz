---
title: "R Coding Exercise"
---

Placeholder file for data coding exercise.




## Loading and Checking Data
### Import libraries
```{r}
library(MASS)
library(synthpop)
library(tidyverse)
library(dplyr)
library(writexl)
library(ggplot2)
```

```{r}
id <- paste0("Applicant #", 1:320)
```

```{r}
# Assign Management Experience Randomly
set.seed(0717)
management_random <- rbinom(320, 1, 0.5)
management <- ifelse(management_random == 0, "manager", "non-manager")
```

```{r}
set.seed(0717)
coding_viz <- rnorm(320, 85, 5)
coding_viz <- pmin(coding_viz, 100)  # Caps scores at 100
coding_viz <- round(coding_viz, 2)  # Rounds scores to two decimal places
```

```{r}
cor_var_means <- c(6.8, 7.2, 8.4, 77, 84, 80)
cor_var_matrix <- matrix(
  c(
    0.87, 0.6, 0.7, 0.36, 1.55, 0.57,
    0.6, 1.2, 0.52, 0.5, 1.2, 2.34,
    0.7, 0.52, 0.68, 0.45, 0.89, 0.75,
    0.36, 0.5, 0.45, 15.2, 1.09, 1.64,
    1.55, 1.2, 0.89, 1.09, 17.2, 1.88,
    0.57, 2.34, 0.75, 1.64, 1.88, 9.3
  ), byrow = T, nrow = 6
)
set.seed(0717)
correlated_vars_df <- as.data.frame(mvrnorm(n = 320, mu = cor_var_means, Sigma = cor_var_matrix))
```

```{r}
# Define the cap_score function
cap_score <- function(x, max_value) {
  pmin(x, max_value)
}
```

```{r}
# Assuming correlated_vars_df is already defined
correlated_vars_df_cols <- c("interview_p1", "interview_p2", "interview_p3", "coding_cleaning", "coding_ml", "performance")
colnames(correlated_vars_df) <- correlated_vars_df_cols

correlated_vars_df <- correlated_vars_df %>%
  mutate(
    interview_p1 = round(cap_score(interview_p1, 10), 1),
    interview_p2 = round(cap_score(interview_p2, 10), 1),
    interview_p3 = round(cap_score(interview_p3, 10), 1),
    coding_cleaning = round(cap_score(coding_cleaning, 100), 2),
    coding_ml = round(cap_score(coding_ml, 100), 2),
    performance = round(cap_score(performance, 100))
  )
```

```{r}

# Define the absences variable
set.seed(0717)
absences <- rpois(320, lambda = 1)

# Define the coding_viz variable
set.seed(0717)
coding_viz <- rnorm(320, 85, 5)
coding_viz <- pmin(coding_viz, 100)
coding_viz <- round(coding_viz, 2)

```

```{r}
# Define the situational variable
set.seed(0717)
situational <- round(runif(320, 60, 100))
```

```{r}
# Assuming correlated_vars_df is already defined and processed
# If not, please define it similarly to other variables

# Example definition of correlated_vars_df
# Make sure correlated_vars_df has 320 rows
correlated_vars_df <- data.frame(
  interview_p1 = rnorm(320, 7, 2),
  interview_p2 = rnorm(320, 7, 2),
  interview_p3 = rnorm(320, 7, 2),
  coding_cleaning = rnorm(320, 90, 5),
  coding_ml = rnorm(320, 90, 5),
  performance = rnorm(320, 85, 10)
)
```

```{r}
# Cap the scores as in previous steps
cap_score <- function(x, max_value) {
  pmin(x, max_value)
}

correlated_vars_df <- correlated_vars_df %>%
  mutate(
    interview_p1 = round(cap_score(interview_p1, 10), 1),
    interview_p2 = round(cap_score(interview_p2, 10), 1),
    interview_p3 = round(cap_score(interview_p3, 10), 1),
    coding_cleaning = round(cap_score(coding_cleaning, 100), 2),
    coding_ml = round(cap_score(coding_ml, 100), 2),
    performance = round(cap_score(performance, 100))
  )

# Assuming id and management are defined
# Example definition
id <- 1:320
management <- sample(70:100, 320, replace = TRUE)

# Combine into applicant_scores data frame
applicant_scores <- cbind(
  id, management, situational, coding_viz, correlated_vars_df, absences
)

# Subset the first 300 rows
applicant_final <- applicant_scores[1:300, ]

```

```{r}
# Write to Excel file
#write_xlsx(as.data.frame(applicant_final), "Employee_Selection_Scores.xlsx")
```

```{r}
# Histogram of situational scores
ggplot(applicant_final, aes(x = situational)) +
  geom_histogram(binwidth = 5, fill = "blue", color = "black") +
  labs(title = "Histogram of Situational Scores", x = "Situational Score", y = "Frequency")
```

```{r}
# Generalized linear model plot
ggplot(applicant_final, aes(x = situational, y = performance)) +
  geom_point() +
  geom_smooth(method = "glm", se = FALSE, color = "green") +
  labs(title = "Generalized Linear Model: Situational vs Performance", x = "Situational Score", y = "Performance Score")

```

```{r}
# Linear model plot
ggplot(applicant_final, aes(x = situational, y = performance)) +
  geom_point() +
  geom_smooth(method = "lm", se = FALSE, color = "red") +
  labs(title = "Linear Model: Situational vs Performance", x = "Situational Score", y = "Performance Score")
```

```{r}
# Generalized linear model plot
ggplot(applicant_final, aes(x = situational, y = performance)) +
  geom_point() +
  geom_smooth(method = "glm", se = FALSE, color = "green") +
  labs(title = "Generalized Linear Model: Situational vs Performance", x = "Situational Score", y = "Performance Score")
```

```{r}
# Scatter plot
ggplot(applicant_final, aes(x = situational, y = performance)) +
  geom_point(color = "blue") +
  labs(title = "Scatter Plot: Situational vs Performance", x = "Situational Score", y = "Performance Score")
```

